Answers for the "Arrays, Pointer Arithmetic, and Structs" section of CS24 HW3:

1. 
0
0
0
0
EF
BE
AD
DE
0
0
0
0
BE
BA
FE
CA

The reason that the hexadecimal ints are adressed backward is because of
little endian byte order, meaning the least significant byte gets placed
at the lowest memory address. The hexadecimal numbers are placed where
there are because the first one the pointer is shifted by 3 addresses, 
whereas the second one the pointer is shifted by 3 ints, so each time
in that one will shift 4 pointer addresses instead of one.


2.
int id: size = 4 bytes, offset = 0
char code[5] size = 5 bytes, offset = 4
entry* next: size = 8 bytes, offset = 16
Total size in memory is 24 bytes, and 17 bytes are actually used

3. 
Offset = 4 * 24 bytes + 4 (for int) + 3 (for getting char[3])
= 103
This is because we want our entry at arr[4] which is the 5th
array struct after our pointer, which then each full one has
24 bytes ahead of it, and then to get char[3] we need to find
the offset within that structure, which is adding 4 and then 3.
Thus, the total offset from the initial pointer will be 103.




