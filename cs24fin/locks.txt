Locking Primitives
==================

1a.  Benefit of spinlocks over normal locks
In a multi-core processor, spinlocks are beneficial because it will keep
threads completing faster because they do not need to be paused and then
re-opened. This can provide performance increases because we need to preform
a context switch every time we put them to sleep, so if we know that
our thread will be unlocked by another thread very quickly, it will be more
efficient for us to not preform the context switch and instead have the thread
actively wait for it to be unlocked.

1b.  Spinlocks on 1-processor systems
On a 1-processor system a spinlock would provide no benefit, because while
our program locks, it will actively wait for the lock to be unlocked.
However, while it is doing this it will use the only processor available, so
no other threads can run because the only procesor is being used to actively
wait for the lock to unlock. This will also cause the lock to not be unlocked,
because no other threads will run that will possible unlock our lock.

2a.  Read/write lock fairness issues
The read write lock that is described has in issue in which it is possible
that a write thread will never (or have to wait a long time) to be able to
access the lock. This case would emerge if we first had a thread R1, then W1
also waiting on the lock. W1 needs to wait for R1 to complete in order to
use the lock. However, R1 will constantly be adding new read threads that want
to access the lock before R1 completes. These threads then access the lock and
skip in front of W1 in the priority because they can run whereas W1 cannot.
As more of these threads are requesting  the lock, W1 will not be able to
access the lock and thus it is unfair because thread W1 may never get
access in a program of this design.

2b.  Fair read/write lock design

The main difference between my design and the old one is that once a
writer is blocked, no more readers are allowed access until the writer
is unblocked, to prevent it from not being able to access the lock.

RULES:
If a reader R1 tries to acquire the read-write lock:
- If no one holds the lock, grant access to R1 immediately
- If a writer W1 holds the lock, the R1 will be blocked until the writer
releases the block.
- If another reader R2 holds the lock, and there is no writer blocked,
then R2 is granted access immediately.
- If another reader holds the lock, and there is a writer thread
blocked, then R2 is blocked until there are no more writers blocked and
all writers have released the lock.

If a writer W1 tries to acquire the read-write lock:
- If no one holds the lock, grant access to W1 immediately
- If the lock is held by some number of readers, block W1 until no more
readers hold the lock
- if another writer W2 holds the lock, block W1 until W2 has released the lock

If multiple threads are blocked at the same time, they will be
granted access in order of when they were blocked. There is no skipping
ahead to let more readers access the lock instead of a writer like there
was before.
